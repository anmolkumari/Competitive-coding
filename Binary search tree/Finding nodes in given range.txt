
class BinaryTree {
    int count=0;
 public static void main(String[] args) {
    new BinaryTree().run();
  }

  static class Node {
    Node left;

    Node right;

    int value;

    public Node(int value) {
      this.value = value;
    }
  }

  public void run() {
    // build the simple tree from chapter 11.
    Node root = new Node(5);
    System.out.println("Binary Tree Example");
    System.out.println("Building tree with root value " + root.value);
    insert(root, 1);
    insert(root, 8);
    insert(root, 9);
    insert(root, 3);
    insert(root, 15);
    System.out.println("Traversing tree in order");
    printInOrder(root);
    node_in_range(root,7,12);
    System.out.println("node in range"+count);
    
  }
  void node_in_range(Node node,int a,int b){

      if(node.value>=a&&node.value<=b)
      {count++;}
      if(node.right!=null&&node.left!=null){
      node_in_range(node.right,a,b);
      node_in_range(node.right, a, b);
}

 }

  public void insert(Node node, int value) {
    if (value < node.value) {
      if (node.left != null) {
        insert(node.left, value);
      } else {
        System.out.println("  Inserted " + value + " to left of "
            + node.value);
        node.left = new Node(value);
      }
    } else if (value > node.value) {
      if (node.right != null) {
        insert(node.right, value);
      } else {
        System.out.println("  Inserted " + value + " to right of "
            + node.value);
        node.right = new Node(value);
      }
    }
  }

  public void printInOrder(Node node) {
    if (node != null) {
      printInOrder(node.left);
      System.out.println( node.value);
      printInOrder(node.right);
    }
  }




}
