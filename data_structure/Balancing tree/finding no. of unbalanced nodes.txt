/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package javaapplication71;
import com.sun.org.apache.xpath.internal.operations.Mod;
import java.util.*;
import java.lang.Math;
/**
 *
 * @author samsung
 */
public class Main {
    int unbalanced_nodes=0;
     int height=0;
    int count=0;
 public static void main(String[] args) {
    new Main().run();
  }

  static class Node {
    Node left;

    Node right;

    int value;

    public Node(int value) {
      this.value = value;
    }
  }

  public void run() {
    // build the simple tree from chapter 11.
    Node root = new Node(5);
    System.out.println("Binary Tree Example");
    System.out.println("Building tree with root value " + root.value);
    insert(root, 1);
    insert(root, 8);
    insert(root, 9);
    insert(root, 3);
    insert(root, 15);
    System.out.println("Traversing tree in order");
    printInOrder(root);
    check_unBalanced_nodes(root);
    System.out.println("unbalaced node : "+unbalanced_nodes);
   // find_mirror_image(root);
    //System.out.println("Traversing tree mirror image in order");
    //printInOrder(root);
  }
  

  public void insert(Node node, int value) {
    if (value < node.value) {
      if (node.left != null) {
        insert(node.left, value);
      } else {
        System.out.println("  Inserted " + value + " to left of "
            + node.value);
        node.left = new Node(value);
      }
    } else if (value > node.value) {
      if (node.right != null) {
        insert(node.right, value);
      } else {
        System.out.println("  Inserted " + value + " to right of "
            + node.value);
        node.right = new Node(value);
      }
    }
  }



  void check_unBalanced_nodes(Node node){
      while(node!=null){
  int hieght_left=hieght(node.left);
  int hieght_right=hieght(node.right);
  int res= hieght_left-hieght_right;
  if(res!=0&&res!=1&&res!=-1){
      System.out.println("node: "+node.value);
      unbalanced_nodes++;}
  check_unBalanced_nodes(node.left);
  check_unBalanced_nodes(node.right);
  
      }
      }

int hieght(Node node){
    if(node==null)return 0;
    height=1+Math.max(hieght(node.left),hieght(node.right));
    return height;

}
 public void printInOrder(Node node) {
    if (node != null) {
      printInOrder(node.left);
      System.out.println(node.value+" height: "+hieght(node));
      //System.out.println( node.value);
      printInOrder(node.right);
    }
  }




}
